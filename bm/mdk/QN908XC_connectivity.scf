#! armcc -E
/*
** ###################################################################
**     Processors:          QN908X
**
**     Compiler:            Keil ARM C/C++ Compiler
**     Reference manual:    QN908X User manual Rev. 1.0 16 February 2016
**     Version:             rev. 1.0, 2016-04-29
**     Build:               b160526
**
**     Abstract:
**         Linker file for the Keil ARM C/C++ Compiler
**
**     Copyright (c) 2016 Freescale Semiconductor, Inc.
**     Copyright 2016 - 2018 NXP
**     All rights reserved.
**
**     SPDX-License-Identifier: BSD-3-Clause
**
**     http:                 www.nxp.com
**     mail:                 support@nxp.com
**
** ###################################################################
*/

/*********************** QN9080 FLASH MEMORY LAYOUT **************************

             0x0000_0000
    - - - +---------------+ - - - - - - - -
          |               | m_bootloader_start = m_flash_start
          |               |
    10KB  |  Bootloader*  |
          |               |
          |               | m_bootloader_end
    - - - +---------------+ - - - - - - - -
    276   |               | m_interrupts_start
    bytes |   Interrupt   |
          | Vectors Table | m_interrupts_end
    - - - +---------------+ - - - - - - - -
          |               | m_bootFlags_start
    16    |               |
    bytes |  Boot Flags*  |
          |               | m_bootFlags_end
    - - - +---------------+ - - - - - - - -
          |               | m_versionTags_start
          |  Version Tags |
          |               | m_versionTags_end
    - - - +---------------+ - - - - - - - -
          |               | NVM_TABLE_START
          |  NVM Table*   |
          |               | NVM_TABLE_END
    - - - +---------------+ - - - - - - - -
          |               | m_text_start
          |               |
          |               |
          | Application** |
          |               |
          |               |
          |               | m_text_end
    - - - +---------------+ - - - - - - - -
          |               | INT_STORAGE_START
          |               |
          |               |
          | OTAP Internal |
          |   Storage*    |	
          |               |
          |               |
          |               | INT_STORAGE_END
    - - - +---------------+ - - - - - - - -
          |               | NV_STORAGE_START_ADDRESS
          |  fNVM_region* |
          | - - - - - - - | --- NV_VIRTUAL_PAGE_BOUND
    8KB   |  sNVM_region* |
          |               | NV_STORAGE_END_ADDRESS
    - - - +---------------+ - - - - - - - -
          |               | m_reserved_flash_start = 0x7e000
          |               |
          |  RESERVED***  |
    6KB   |               |
          |   - - - - -   |
          |  Flash config |
          |   _ _ _ _ _   |
    - - - +---------------+ - - - - - - - -
             0x0008_0000    m_flash_end

NOTES:
			 
 * - These sections are optional for certain applications. 
     If a section is disabled, its size will be zero. 
	 NV STORAGE default size is 8 KB but it is user configurable.
 ** - Based on enabled sections, the Application will use the remaining
      available free space. If OTAP Internal Storage is enabled, 
	  the Application and the OTAP Internal Storage will share approximately 
	  equal memory free space (~1/2 each). 	  
 *** - The RESERVED space is used by the FLASH Page Configuration and NVDS.
 
*****************************************************************************/




/*** flash memory characteristics ***/
#define m_flash_start   0x00000000
#define m_flash_end     0x0007FFFF
#define m_flash_size    0x00080000
#define m_sector_size   2048       /* 2k  */


#ifndef __ram_vector_table__
  #define __ram_vector_table__ 0
#endif

#ifndef gUseBootloaderLink_d
  #define gUseBootloaderLink_d 0
#endif

#ifndef gNVMSectorCountLink_d
  #define gNVMSectorCountLink_d 4
#endif

#ifndef gUseInternalStorageLink_d
  #define gUseInternalStorageLink_d 0
#endif


/****************************************************
 ******          Flash regions sizes           ******
 ****************************************************/
#define m_bootloader_size         ((gUseBootloaderLink_d) ? (5*m_sector_size) : 0x0)
#define __vector_table_size__     0x114
#define __ram_vector_table_size__ ((__ram_vector_table__) ? 0x114 : 0x0)
#define m_bootFlags_size          ((gUseBootloaderLink_d) ? 0x10 : 0x0)
#define NV_STORAGE_SIZE           (gNVMSectorCountLink_d * m_sector_size)
#define m_reserved_flash_size     (3 * m_sector_size)

#if (gUseInternalStorageLink_d != 0)
  #define used_flash_size         (m_bootloader_size + __vector_table_size__ + m_bootFlags_size + NV_STORAGE_SIZE + m_reserved_flash_size)
  #define INT_STORAGE_SIZE        (m_sector_size * ( (((m_flash_size - used_flash_size) / 2) / m_sector_size) + 1 ))  //Half of the free flash, aligned to m_sector_size
#else
  #define INT_STORAGE_SIZE 0
#endif


/****************************************************
 ******        Flash Regions, low to high      ******
 ****************************************************/
#define m_bootloader_start  m_flash_start
#define m_bootloader_end    (m_bootloader_size > 0) ? (m_bootloader_start + m_bootloader_size - 1) : m_bootloader_start
#define m_interrupts_start  m_bootloader_size
#define m_interrupts_end    (m_interrupts_start + __vector_table_size__ - 1)
#define m_interrupts_size   (m_interrupts_end - m_interrupts_start + 1)
#define m_bootFlags_start   (m_interrupts_end + 1)
#define m_bootFlags_end     (m_bootFlags_start + m_bootFlags_size - 1)
#define m_versionTags_start (m_bootFlags_end + 1)
#define m_versionTags_size  (0x80)
#define m_versionTags_end   (m_versionTags_start + m_versionTags_size - 1)
#define NVM_TABLE_SIZE      (0xc0)
#define NVM_TABLE_START     (NVM_TABLE_END + NVM_TABLE_SIZE - 1)
#define NVM_TABLE_END       (m_versionTags_end + 1)
#define m_text_start        (NVM_TABLE_START + 1)


/****************************************************
 *****        Flash Regions, high to low       ******
 ****************************************************/
          
#define m_reserved_flash_start      (m_flash_size - 3 * m_sector_size)
#define NV_STORAGE_END_ADDRESS      (m_reserved_flash_start - 1)
#define NV_STORAGE_START_ADDRESS    (NV_STORAGE_END_ADDRESS - NV_STORAGE_SIZE + 1)
#define INT_STORAGE_END             (NV_STORAGE_START_ADDRESS - 1)
#define INT_STORAGE_START           (INT_STORAGE_END - INT_STORAGE_SIZE + 1)
#define m_text_end                  (INT_STORAGE_START - 1)
#define m_text_size                 (m_text_end - m_text_start + 1)
#define NV_VIRTUAL_PAGE_BOUND       (NV_STORAGE_END_ADDRESS - (NV_STORAGE_SIZE / 2))


/*********************
 * RAM memory config *
 *********************/
#define rom_bootloader_ram_used 0x400 /* Reserved RAM for ROM Bootloader */
#define m_interrupts_ram_start  (0x04000000 + rom_bootloader_ram_used)
#define m_interrupts_ram_end    (m_interrupts_ram_start + __vector_table_size__ - 1)
#define m_data_start            (m_interrupts_ram_end + 1)
#define m_data_end              0x0401FFFF
#define m_data_size             (m_data_end - m_data_start + 1)


/* RAM memory sizes */
#ifdef __stack_size__
  #define Stack_Size   __stack_size__
#else
  #define Stack_Size   0x0800
#endif

#ifdef __heap_size__
  #define Heap_Size     __heap_size__
#else
  #define Heap_Size     0x0000
#endif



LR_m_text m_interrupts_start m_reserved_flash_start {
  VECTOR_ROM m_interrupts_start m_interrupts_size {
    * (RESET,+FIRST)
  }
  
  BOOT_FLAGS m_bootFlags_start FIXED m_bootFlags_size{
    * (.BootloaderFlags)
  }
  
  VERSION_TAGS m_versionTags_start EMPTY m_versionTags_size{
  }
  
  ER_NVM_TABLE NVM_TABLE_END FIXED (NVM_TABLE_SIZE){
    * (NVM_TABLE)
  }
  
  ER_m_text m_text_start FIXED m_text_size {
    * (InRoot$$Sections)
    .ANY (+RO)
  }
  
  INT_STORAGE INT_STORAGE_START EMPTY (INT_STORAGE_END-INT_STORAGE_START+1){
  }
  
  NVM_region NV_STORAGE_START_ADDRESS EMPTY (NV_STORAGE_END_ADDRESS-NV_STORAGE_START_ADDRESS+1){
  }

#if (defined(__ram_vector_table__))
  VECTOR_RAM m_interrupts_ram_start EMPTY __ram_vector_table_size__ {
  }
#else
  VECTOR_RAM m_interrupts_start EMPTY 0 {
  }
#endif

  RW_m_data m_data_start m_data_size-Stack_Size-Heap_Size {
    .ANY (+RW +ZI)
    *(.textrw)
  }
  ARM_LIB_HEAP +0 ALIGN 8 EMPTY Heap_Size {
  }
  ARM_LIB_STACK +0 ALIGN 8 EMPTY Stack_Size {
  }

}
